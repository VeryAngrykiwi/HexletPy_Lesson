'''
Описание: 
"Счастливым" называют билет с номером, в котором сумма первой половины цифр равна сумме второй половины цифр. Номера могут быть произвольной длины. Единственное условие — количество цифр всегда четно, например: 33 или 2341.

Билет с номером 385916 — счастливый, так как 3 + 8 + 5 == 9 + 1 + 6. Билет с номером 231002 не является счастливым, так как 2 + 3 + 1 != 0 + 0 + 2.

Задача:
Реализуйте функцию is_happy_ticket(), проверяющую является ли номер счастливым (номер — всегда строка). Функция должна возвращать True, если билет счастливый, или False, если нет.

Подразумевается, что данные на входе всегда корректны, поэтому дополнительные проверки не требуются.
'''

# ChatGpt

def is_happy_ticket(ticket_number):
  # Проверяем, что длина номера четная
  if len(ticket_number) % 2 != 0:
      return False

  # Разбиваем номер на две половины
  half_len = len(ticket_number) // 2
  first_half = ticket_number[:half_len]
  second_half = ticket_number[half_len:]

  # Считаем суммы цифр в каждой половине
  sum_first_half = sum(int(digit) for digit in first_half)
  sum_second_half = sum(int(digit) for digit in second_half)

  # Проверяем, является ли билет счастливым
  return sum_first_half == sum_second_half

'''
Объяснение
Определение функции:


def is_happy_ticket(ticket_number):
Здесь создается функция is_happy_ticket, которая принимает один аргумент ticket_number. Этот аргумент должен представлять собой номер билета в виде строки.

Проверка на четность:
if len(ticket_number) % 2 != 0:
    return False
Эта проверка выполняется, чтобы удостовериться, что длина номера билета четная. Если она не четная, то билет не считается счастливым, и функция сразу возвращает False.

Разбиение номера на половины:
half_len = len(ticket_number) // 2
first_half = ticket_number[:half_len]
second_half = ticket_number[half_len:]
Здесь определяется половина длины номера (half_len), и номер разбивается на две половины: first_half и second_half.

Суммирование цифр в каждой половине:
sum_first_half = sum(int(digit) for digit in first_half)
sum_second_half = sum(int(digit) for digit in second_half)
С помощью генераторов списков и функции sum считаются суммы цифр в каждой из половин.

Проверка на счастье:

return sum_first_half == sum_second_half
Здесь сравниваются суммы цифр в обеих половинах. Если они равны, функция возвращает True, что означает, что билет считается счастливым. В противном случае функция возвращает False.

Пример использования функции:
ticket_number = "123321"
result = is_happy_ticket(ticket_number)
print(result)  # Выведет True, так как 1+2+3 == 3+2+1
Надеюсь, это помогло разобраться в коде. Если у вас есть дополнительные вопросы, не стесняйтесь спрашивать!

sum_first_half = sum(int(digit) for digit in first_half)
Эта строка использует генератор списка (list comprehension) вместе с функцией sum для подсчета суммы цифр в первой половине номера билета.

Генератор списка:

(int(digit) for digit in first_half)
Это генератор списка, который проходит по каждому символу (digit) в строке first_half и преобразует его в целое число с помощью int(digit).

Функция sum:
sum(...)
Функция sum принимает итерируемый объект (в данном случае, это результат генератора списка) и возвращает сумму всех элементов.

Присвоение результатов суммирования переменной:
sum_first_half = sum(...)
Результат суммирования цифр в первой половине (sum(...)) присваивается переменной sum_first_half.

Таким образом, вся строка выполняет следующее действие: она преобразует каждую цифру из первой половины номера билета в целое число и затем суммирует все эти целые числа, сохраняя результат в переменной sum_first_half.
'''

# replit
def is_happy_ticket(number):
    half_length = len(number) // 2
    first_half = number[:half_length]
    second_half = number[half_length:]
    return sum(map(int, first_half)) == sum(map(int, second_half))

print(is_happy_ticket('385916'))